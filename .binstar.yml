
## The package attribure specifies a binstar package namespace to build the package to.
## This can be specified here or on the command line
package: numba

## You can also specify the account to upload to,
## you must be an admin of that account, this
## defaults to your user account
# user: USERNAME

#===============================================================================
# Build Matrix Options
# Thes options may be a single item, a list or empty
# The resulting number of builds is [platform * engine * env]
#===============================================================================

# The platforms to build on.
# platform defaults to linux-64
platform:
 - linux-64
 - linux-32
 - win-32
 - win-64
 - osx-64

# The engine are the initial conda packages you want to run with
engine:
 - python=2.6 argparse funcsigs unittest2
 #- python=2.7 funcsigs
 #- python=3.3
 - python=3.4

## The env param is an environment variable list
#env:
 #- MY_ENV=A CC=gcc
 #- MY_ENV=B

#===============================================================================
# Scrip options
# Thes options may be broken out into the before_script, script and after_script
# or not, that is up to you
#===============================================================================

# Run before the script
before_script:
  - conda config --add channels numba
  - conda install -q --yes numpy llvmlite jinja2

# Put your main computations here!
script:
  - python setup.py build
  - python setup.py build_ext --inplace
  - python -m numba.testing -v -b -m

## This will run after the script regardless of the result of script
## BINSTAR_BUILD_RESULT=[succcess|failure]
# after_script:
#   - echo "The build was a $BINSTAR_BUILD_RESULT" | tee artifact1.txt
## This will be run only after a successful build
# after_success:
#   - echo "after_success!"
## This will be run only after a build failure
# after_failure:
#   - echo "after_failure!"

#===============================================================================
# Build Results
# Build results are split into two categories: artifacts and targets
# You may omit either key and stiff have a successful build
# They may be a string, list and contain any bash glob
#===============================================================================

## Build Targets: Upload these files to your binstar package
## build targets may be a list of files (globs allows) to upload
## The special build targets 'conda' and 'pypi' may be used to
## upload conda builds
## e.g. conda is an alias for /opt/anaconda/conda-bld/<os-arch>/*.tar.bz2
#build_targets:
  #- conda
