Numba is an Open Source NumPy-aware optimizing compiler for Python 
sponsored by Continuum Analytics, Inc.  It uses the
remarkable LLVM compiler infrastructure to compile Python syntax to
machine code.

It is aware of NumPy arrays as typed memory regions and so can speed-up
code using NumPy arrays.  Other, less well-typed code will be translated 
to Python C-API calls effectively removing the "interpreter" but not removing
the dynamic indirection.  

Numba is also not a tracing jit.  It *compiles* your code before it gets
run either using run-time type information or type information you provide
in the decorator.

Numba is a mechanism for producing machine code from Python syntax and typed
data structures such as those that exist in NumPy. 

Dependencies:

  * LLVM 3.1
  * llvm-py (from llvmpy/llvmpy fork)
  * numpy
  * Meta (from numba/Meta fork)
  * Cython
  * nose (for unit tests)

* Compile LLVM 3.1

wget http://llvm.org/releases/3.1/llvm-3.1.src.tar.gz 
tar zxvf llvm-3.1.src.tar.gz
./configure --enable-optimized
# Be sure your compiler architecture is same as version of Python you will use
#  e.g. -arch i386 or -arch x86_64.  It might be best to be explicit about this.
make install

* Clone LLVM-py from github

git clone https://github.com/llvmpy/llvmpy.git
python setup.py install

* Clone Meta from github

git clone https://github.com/numba/Meta.git
python setup.py install

* Install Cython (http://cython.org)

easy_install cython
-OR-
pip install cython
-OR-
...

* Install nose 

easy_install nose
-OR-
pip install nose
-OR-
...

* Build Numba

git clone https://github.com/numba/numba.git
python setup.py install


* Follow Numba
Join the numba mailinglist numba-users@continuum.io
https://groups.google.com/a/continuum.io/d/forum/numba-users

Some old archives are at http://librelist.com/browser/numba/

* See if our sponsor can help you (which can help this project) 
http://www.continuum.io

For some documentation, see
https://github.com/numba/numba/blob/master/docs/source/doc/userguide.rst
