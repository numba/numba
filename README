Numba is an Open Source NumPy-aware optimizing compiler for Python 
sponsored by Continuum Analytics, Inc.  It uses the
remarkable LLVM compiler infrastructure to compile Python byte-code to
machine code especially for use in the NumPy run-time and SciPy
modules.

Not all Python syntax is supported, currently.  And long-term,
the best that will be done with some Python constructs is to 
eliminate the "interpreter".  Numba is going to work well first with 
NumPy arrays that are large arrays of typed information.

If you are looking for a full Python compiler to handle all Python syntax,
look at PyPy, ShedSkin, Nuitka, or other projects.

Numba is also not a tracing jit.  It *compiles* your code before it gets
run either using run-time type information or type information you provide in the decorator.

Dependencies:

  * LLVM 3.1
  * llvm-py (from llvmpy/llvmpy fork)
  * numpy
  * Meta (from numba/Meta fork)

* Compile LLVM 3.1: 

wget http://llvm.org/releases/3.1/llvm-3.1.src.tar.gz 
tar zxvf llvm-3.1.src.tar.gz
./configure --enable-optimized
# Be sure your compiler architecture is same as version of Python you will use
#  e.g. -arch i386 or -arch x86_64.  It might be best to be explicit about this.
make install


* Clone LLVM-py from github
git clone https://github.com/llvmpy/llvmpy.git
python setup.py install

* Clone Meta from github
git clone https://github.com/numba/Meta.git
python setup.py install

* Build Numba
python setup.py install


* Follow Numba
Join the numba mailinglist numba-users@continuum.io
https://groups.google.com/a/continuum.io/d/forum/numba-users

Some old archives are at http://librelist.com/browser/numba/

* See if our sponsor can help you (which can help this project) 
http://www.continuum.io

For some documentation, see
https://github.com/numba/numba/blob/master/docs/source/doc/userguide.rst
